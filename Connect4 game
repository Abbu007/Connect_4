# Connect4

import numpy as np
import pygame
import sys
import math

BACKGROUND = (0,0,200)
EMPTY = (255,255,255)
PLAYER1 =input("player1 do u want red or yellow (R or Y) ")
PLAYER1=PLAYER1.upper()
while PLAYER1 :

	if PLAYER1=='R' :
		PLAYER1= (255,0,0)
		PLAYER2 = (255,255,0)
		break
	elif PLAYER1 == 'Y':
		PLAYER1	= (255,255,0)
		PLAYER2 = (255,0,0)
		break
	else :
		print("please select R or Y")
		PLAYER1 =input("player1 do u want red or yellow (R or Y) ")

ROW_MAX = int(input("enter the number of rows "))
COLUMN_MAX = int(input("enter the number of columns "))
NO_PIECES= int(input("enter the number of pieces to connect inorder to win "))
	
while ROW_MAX<6 or COLUMN_MAX<7 or NO_PIECES<4 :
	print('please enter positive and values greater than 6 for rows, 7 for columns and 4 for number of pieces')
	ROW_MAX = int(input("enter the number of rows "))
	COLUMN_MAX = int(input("enter the number of columns "))
	NO_PIECES= int(input("enter the number of pieces to connect inorder to win "))

def create_board():
	board = np.zeros((ROW_MAX,COLUMN_MAX))
	return board

def drop_piece(board, row, col, piece):
	board[row][col] = piece

def is_valid_location(board, col):
	return board[ROW_MAX-1][col] == 0

def get_next_open_row(board, col):
	for r in range(ROW_MAX):
		if board[r][col] == 0:
			return r

def print_board(board):
	print(np.flip(board, 0))

def winning_move(board, piece):
	# Horizontal locations
	for c in range(COLUMN_MAX-3):
		for r in range(ROW_MAX):
			if board[r][c] == piece and board[r][c+1] == piece and board[r][c+2] == piece and board[r][c+3] == piece:
				return True

	# Vertical locations
	for c in range(COLUMN_MAX):
		for r in range(ROW_MAX-3):
			if board[r][c] == piece and board[r+1][c] == piece and board[r+2][c] == piece and board[r+3][c] == piece:
				return True

	#  Positive diaganols
	for c in range(COLUMN_MAX-3):
		for r in range(ROW_MAX-3):
			if board[r][c] == piece and board[r+1][c+1] == piece and board[r+2][c+2] == piece and board[r+3][c+3] == piece:
				return True

	# Negative diaganols
	for c in range(COLUMN_MAX-3):
		for r in range(3, ROW_MAX):
			if board[r][c] == piece and board[r-1][c+1] == piece and board[r-2][c+2] == piece and board[r-3][c+3] == piece:
				return True

def draw_board(board):
	for c in range(COLUMN_MAX):
		for r in range(ROW_MAX):
			pygame.draw.rect(screen, BACKGROUND, (c*SQUARESIZE, r*SQUARESIZE+SQUARESIZE, SQUARESIZE, SQUARESIZE))
			pygame.draw.circle(screen, EMPTY, (int(c*SQUARESIZE+SQUARESIZE/2), int(r*SQUARESIZE+SQUARESIZE+SQUARESIZE/2)), RADIUS)
	
	for c in range(COLUMN_MAX):
		for r in range(ROW_MAX):		
			if board[r][c] == 1:
				pygame.draw.circle(screen, PLAYER1, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
			elif board[r][c] == 2: 
				pygame.draw.circle(screen, PLAYER2, (int(c*SQUARESIZE+SQUARESIZE/2), height-int(r*SQUARESIZE+SQUARESIZE/2)), RADIUS)
	pygame.display.update()


board = create_board()
print_board(board)
game_over = False
turn = 0

pygame.init()

SQUARESIZE = 100

width = COLUMN_MAX * SQUARESIZE
height = (ROW_MAX+1) * SQUARESIZE

size = (width, height)

RADIUS = int(SQUARESIZE/2 - 15)

screen = pygame.display.set_mode(size)
draw_board(board)
pygame.display.update()

myfont = pygame.font.SysFont("AERIAL", 60)

while not game_over:

	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			sys.exit()

		if event.type == pygame.MOUSEMOTION:
			pygame.draw.rect(screen, EMPTY, (0,0, width, SQUARESIZE))
			posx = event.pos[0]
			if turn == 0:
				pygame.draw.circle(screen, PLAYER1, (posx, int(SQUARESIZE/2)), RADIUS)
			else: 
				pygame.draw.circle(screen, PLAYER2, (posx, int(SQUARESIZE/2)), RADIUS)
		pygame.display.update()

		if event.type == pygame.MOUSEBUTTONDOWN:
			pygame.draw.rect(screen, EMPTY, (0,0, width, SQUARESIZE))
			# Player 1 Input
			if turn == 0:
				posx = event.pos[0]
				col = int(math.floor(posx/SQUARESIZE))

				if is_valid_location(board, col):
					row = get_next_open_row(board, col)
					drop_piece(board, row, col, 1)

					if winning_move(board, 1):
						label = myfont.render("Player 1 wins!!", 1, PLAYER1)
						screen.blit(label, (40,10))
						game_over = True


			# Player 2 Input
			else:				
				posx = event.pos[0]
				col = int(math.floor(posx/SQUARESIZE))

				if is_valid_location(board, col):
					row = get_next_open_row(board, col)
					drop_piece(board, row, col, 2)

					if winning_move(board, 2):
						label = myfont.render("Player 2 wins!!", 1, PLAYER2)
						screen.blit(label, (40,10))
						game_over = True

			print_board(board)
			draw_board(board)

			turn += 1
			turn = turn % 2

			if game_over:
				pygame.time.wait(5000)
